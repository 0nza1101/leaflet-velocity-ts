(()=>{"use strict";var t,e,i,n,o,a,r={286:(t,e,i)=>{i.d(e,{Z:()=>s});var n=i(537),o=i.n(n),a=i(645),r=i.n(a)()(o());r.push([t.id,'.IoWwiOJa3pQTAZUawPer {\n  background-color: rgba(255, 255, 255, 0.7);\n  padding: 0 5px;\n  margin: 0 !important;\n  color: #333;\n  font: 11px/1.5 "Helvetica Neue", Arial, Helvetica, sans-serif;\n}\n',"",{version:3,sources:["webpack://./src/leaflet-velocity.css"],names:[],mappings:"AAAA;EACE,0CAA0C;EAC1C,cAAc;EACd,oBAAoB;EACpB,WAAW;EACX,6DAA6D;AAC/D",sourcesContent:['.leafletControlVelocity {\n  background-color: rgba(255, 255, 255, 0.7);\n  padding: 0 5px;\n  margin: 0 !important;\n  color: #333;\n  font: 11px/1.5 "Helvetica Neue", Arial, Helvetica, sans-serif;\n}\n'],sourceRoot:""}]),r.locals={leafletControlVelocity:"IoWwiOJa3pQTAZUawPer"};const s=r},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var r={};if(n)for(var s=0;s<this.length;s++){var h=this[s][0];null!=h&&(r[h]=!0)}for(var u=0;u<t.length;u++){var l=[].concat(t[u]);n&&r[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),i&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=i):l[2]=i),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:t=>{t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(o," */"),r=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[e].concat(r).concat([a]).join("\n")}return[e].join("\n")}},9:(t,e,i)=>{i.r(e),i.d(e,{default:()=>v});var n=i(379),o=i.n(n),a=i(795),r=i.n(a),s=i(569),h=i.n(s),u=i(565),l=i.n(u),c=i(216),p=i.n(c),d=i(589),f=i.n(d),y=i(286),m={};m.styleTagTransform=f(),m.setAttributes=l(),m.insert=h().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=p(),o()(y.Z,m);const v=y.Z&&y.Z.locals?y.Z.locals:void 0},379:t=>{var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var a={},r=[],s=0;s<t.length;s++){var h=t[s],u=n.base?h[0]+n.base:h[0],l=a[u]||0,c="".concat(u," ").concat(l);a[u]=l+1;var p=i(c),d={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==p)e[p].references++,e[p].updater(d);else{var f=o(d,n);n.byIndex=s,e.splice(s,0,{identifier:c,updater:f,references:1})}r.push(c)}return r}function o(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,o){var a=n(t=t||[],o=o||{});return function(t){t=t||[];for(var r=0;r<a.length;r++){var s=i(a[r]);e[s].references--}for(var h=n(t,o),u=0;u<a.length;u++){var l=i(a[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=h}}},569:t=>{var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,i)=>{t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var o=void 0!==i.layer;o&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,o&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var a=i.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},45:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){}return t.prototype.initialize=function(t){this._map=null,this._canvas=null,this._frame=null,this._delegate=null,L.Util.setOptions(this,t)},t.prototype.delegate=function(t){return this._delegate=t,this},t.prototype.needRedraw=function(){return this._frame||(this._frame=L.Util.requestAnimFrame(this.drawLayer,this)),this},t.prototype._onLayerDidResize=function(t){this._canvas.width=t.newSize.x,this._canvas.height=t.newSize.y},t.prototype._onLayerDidMove=function(){var t=this._map.containerPointToLayerPoint([0,0]);L.DomUtil.setPosition(this._canvas,t),this.drawLayer()},t.prototype.getEvents=function(){var t={resize:this._onLayerDidResize,moveend:this._onLayerDidMove,zoomanim:void 0};return this._map.options.zoomAnimation&&L.Browser.any3d&&(t.zoomanim=this._animateZoom),t},t.prototype.onAdd=function(t){this._map=t,this._canvas=L.DomUtil.create("canvas","leaflet-layer"),this.tiles={};var e=this._map.getSize();this._canvas.width=e.x,this._canvas.height=e.y;var i=this._map.options.zoomAnimation&&L.Browser.any3d;L.DomUtil.addClass(this._canvas,"leaflet-zoom-"+(i?"animated":"hide")),t._panes.overlayPane.appendChild(this._canvas),t.on(this.getEvents(),this);var n=this._delegate||this;n.onLayerDidMount&&n.onLayerDidMount(),this.needRedraw();var o=this;setTimeout((function(){o._onLayerDidMove()}),0)},t.prototype.onRemove=function(t){var e=this._delegate||this;e.onLayerWillUnmount&&e.onLayerWillUnmount(),t.getPanes().overlayPane.removeChild(this._canvas),t.off(this.getEvents(),this),this._canvas=null},t.prototype.addTo=function(t){return t.addLayer(this),this},t.prototype.LatLonToMercator=function(t){return{x:6378137*t.lng*Math.PI/180,y:6378137*Math.log(Math.tan((90+t.lat)*Math.PI/360))}},t.prototype.drawLayer=function(){var t=this._map.getSize(),e=this._map.getBounds(),i=this._map.getZoom(),n=this.LatLonToMercator(this._map.getCenter()),o=this.LatLonToMercator(this._map.containerPointToLatLng(this._map.getSize())),a=this._delegate||this;a.onDrawLayer&&a.onDrawLayer({layer:this,canvas:this._canvas,bounds:e,size:t,zoom:i,center:n,corner:o}),this._frame=null},t.prototype._setTransform=function(t,e,i){var n=e||new L.Point(0,0);t.style[L.DomUtil.TRANSFORM]=(L.Browser.ie3d?"translate("+n.x+"px,"+n.y+"px)":"translate3d("+n.x+"px,"+n.y+"px,0)")+(i?" scale("+i+")":"")},t.prototype._animateZoom=function(t){var e=this._map.getZoomScale(t.zoom),i=L.Layer?this._map._latLngToNewLayerPoint(this._map.getBounds().getNorthWest(),t.zoom,t.center):this._map._getCenterOffset(t.center)._multiplyBy(-e).subtract(this._map._getMapPanePos());L.DomUtil.setTransform(this._canvas,i,e)},t}();e.default=i},544:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(9),o=function(){function t(){this._windy=null,this._map=null,this._container=null,this.options={position:"bottomleft",emptyString:"Unavailable",angleConvention:"bearingCCW",speedUnit:"m/s"}}return t.prototype.setWindy=function(t){!this._windy&&t&&(this._windy=t)},t.prototype.setOptions=function(t){this.options=t},t.prototype.onAdd=function(t){return this._map=t,this._container=L.DomUtil.create("div",n.leafletControlVelocity),L.DomEvent.disableClickPropagation(this._container),this._map.on("mousemove",this.drawWindSpeed,this),this._container.innerHTML=this.options.emptyString,this._container},t.prototype.onRemove=function(t){this._map.off("mousemove",this.drawWindSpeed,this)},t.prototype.vectorToSpeed=function(t,e,i){var n=Math.sqrt(Math.pow(t,2)+Math.pow(e,2));return"k/h"===i?this.meterSec2kilometerHour(n):"kt"===i?this.meterSec2Knots(n):n},t.prototype.vectorToDegrees=function(t,e,i){i.endsWith("CCW")&&(e=e>0?e=-e:Math.abs(e));var n=Math.sqrt(Math.pow(t,2)+Math.pow(e,2)),o=180*Math.atan2(t/n,e/n)/Math.PI+180;return"bearingCW"!==i&&"meteoCCW"!==i||(o+=180)>=360&&(o-=360),o},t.prototype.meterSec2Knots=function(t){return t/.514},t.prototype.meterSec2kilometerHour=function(t){return 3.6*t},t.prototype.drawWindSpeed=function(t){var e=this._map.containerPointToLatLng(L.point(t.containerPoint.x,t.containerPoint.y)),i=this._windy.interpolate(e.lng,e.lat),n="";i&&!isNaN(i[0])&&!isNaN(i[1])&&i[2]?n="<strong>  Direction: </strong>"+this.vectorToDegrees(i[0],i[1],this.options.angleConvention).toFixed(3)+"Â°, <thisstrong>  Speed: </strong>"+this.vectorToSpeed(i[0],i[1],this.options.speedUnit).toFixed(1)+" ".concat(this.options.speedUnit):this.options.emptyString&&(n=this.options.emptyString),this._container.innerHTML=n},t}();e.default=o},366:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(172),o=i(871),a=i(611),r=i(451),s=i(45),h=i(544),u=(L.Layer?L.Layer:L.Class).extend(new s.default),l=L.Control.extend(new h.default),c=function(){function t(){this._map=null,this._canvasLayer=null,this._windy=null,this._context=null,this._displayTimeout=null,this._mouseControl=null,this.options={displayValues:!0,displayOptions:{velocityType:"Velocity",position:"bottomleft",emptyString:"No velocity data",angleConvention:"bearingCCW",speedUnit:"m/s"},maxVelocity:10,colorScale:null,data:null}}return t.prototype.initialize=function(t){L.Util.setOptions(this,t)},t.prototype.onAdd=function(t){this._canvasLayer=(new u).delegate(this),this._canvasLayer.addTo(t),this._map=t},t.prototype.onRemove=function(t){this._destroyWind()},t.prototype.setData=function(t){this.options.data=t,this._windy&&(this._windy.setData(t),this._clearAndRestart()),this.fire("load")},t.prototype.onDrawLayer=function(t,e){var i=this;this._windy?this.options.data&&(this._displayTimeout&&clearTimeout(i._displayTimeout),this._displayTimeout=setTimeout((function(){i._startWindy()}),150)):this._initWindy()},t.prototype._startWindy=function(){var t=this._map.getBounds(),e=this._map.getSize();this._windy.start(new r.default(new a.default(t._northEast.lat,t._northEast.lng,t._southWest.lat,t._southWest.lng),new o.default(0,0,e.x,e.y)))},t.prototype._initWindy=function(){var t=this,e=Object.assign({canvas:this._canvasLayer._canvas},this.options);this._windy=new n.default(e),this._context=this._canvasLayer._canvas.getContext("2d"),this._canvasLayer._canvas.classList.add("velocity-overlay"),this.onDrawLayer(),this._map.on("dragstart",(function(){t._windy&&t._windy.stop()})),this._map.on("dragend",(function(){t._clearAndRestart()})),this._map.on("zoomstart",(function(){t._windy&&t._windy.stop()})),this._map.on("zoomend",(function(){t._clearAndRestart()})),this._map.on("resize",(function(){t._clearWind()})),this._initMouseHandler()},t.prototype._initMouseHandler=function(){!this._mouseControl&&this.options.displayValues&&((this.options.displayOptions||{}).leafletVelocity=this,this._mouseControl=new l,this._mouseControl.setWindy(this._windy),this._mouseControl.setOptions(this.options.displayOptions),this._mouseControl.addTo(this._map))},t.prototype._clearAndRestart=function(){this._context&&this._context.clearRect(0,0,3e3,3e3),this._windy&&this._startWindy()},t.prototype._clearWind=function(){this._windy&&this._windy.stop(),this._context&&this._context.clearRect(0,0,3e3,3e3)},t.prototype._destroyWind=function(){this._displayTimeout&&clearTimeout(this._displayTimeout),this._windy&&this._windy.stop(),this._context&&this._context.clearRect(0,0,3e3,3e3),this._mouseControl&&this._map.removeControl(this._mouseControl),this._mouseControl=null,this._windy=null,this._map.removeLayer(this._canvasLayer)},t}();e.default=c},391:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t){this.buckets=[],this.colorScale=t;for(var e=0;e<t.size;e++)this.buckets.push([])}return t.prototype.clear=function(){this.buckets.forEach((function(t){t.splice(0,t.length)}))},t.prototype.add=function(t,e){var i=this.colorScale.getColorIndex(t.intensity);i<0||i>=this.buckets.length?console.log(i):(t.xt=t.x+e.u,t.yt=t.y+e.v,this.buckets[i].push(t))},t.prototype.draw=function(t){var e=this;this.buckets.forEach((function(i,n){i.length>0&&(t.beginPath(),t.strokeStyle=e.colorScale.colorAt(n),i.forEach((function(e){t.moveTo(e.x,e.y),t.lineTo(e.xt,e.yt),e.x=e.xt,e.y=e.yt})),t.stroke())}))},t}();e.default=i},871:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(217),o=function(){function t(t,e,i,n){this.xMin=t,this.yMin=e,this.xMax=i,this.yMax=n}return Object.defineProperty(t.prototype,"width",{get:function(){return this.xMax-this.xMin},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.yMax-this.yMin},enumerable:!1,configurable:!0}),t.prototype.getRandomParticule=function(t){var e=Math.round(Math.floor(Math.random()*this.width)+this.xMin),i=Math.round(Math.floor(Math.random()*this.height)+this.yMin);return new n.default(e,i,t)},t.prototype.resetParticule=function(t){var e=Math.round(Math.floor(Math.random()*this.width)+this.xMin),i=Math.round(Math.floor(Math.random()*this.height)+this.yMin);return t.reset(e,i),t},t}();e.default=o},0:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e,i){this.scale=["rgb(36,104, 180)","rgb(60,157, 194)","rgb(128,205,193 )","rgb(151,218,168 )","rgb(198,231,181)","rgb(238,247,217)","rgb(255,238,159)","rgb(252,217,125)","rgb(255,182,100)","rgb(252,150,75)","rgb(250,112,52)","rgb(245,64,32)","rgb(237,45,28)","rgb(220,24,32)","rgb(180,0,35)"],this.setMinMax(t,e),i instanceof Array&&i.length&&(this.scale=i)}return t.prototype.setMinMax=function(t,e){this.minValue=t,this.maxValue=e},Object.defineProperty(t.prototype,"size",{get:function(){return this.scale.length},enumerable:!1,configurable:!0}),t.prototype.getColorIndex=function(t){if(t<=this.minValue)return 0;if(t>=this.maxValue)return this.scale.length-1;var e=this.scale.length*(t-this.minValue)/(this.maxValue-this.minValue);return e<0?0:e>this.scale.length-1?this.scale.length-1:Math.floor(e)},t.prototype.colorAt=function(t){return this.scale[t]},t.prototype.getColor=function(t){return this.scale[this.getColorIndex(t)]},t}();e.default=i},462:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(464),o=function(){function t(t,e,i,n,o,a,r){this.data=t,this.Ï0=e,this.Î»0=i,this.ÎÎ»=o,this.ÎÏ=n,this.height=a,this.width=r}return Object.defineProperty(t.prototype,"valueRange",{get:function(){if(!this.data.length)return[0,0];var t=this.data[0].intensity,e=this.data[0].intensity;return this.data.forEach((function(i){t=Math.min(t,i.intensity),e=Math.max(e,i.intensity)})),[t,e]},enumerable:!1,configurable:!0}),t.prototype.get=function(t,e){var i=this.floorMod(t-this.Î»0,360)/this.ÎÎ»,o=(this.Ï0-e)/this.ÎÏ,a=Math.floor(i),r=a+1;r>=this.width&&(r=this.Î»0);var s=Math.floor(o),h=s+1;h>=this.height&&(h=s);var u=i-a,l=o-s;if(a>=0&&s>=0&&a<this.width&&s<this.height){var c=this.data[a+s*this.width],p=this.data[r+s*this.width];if(this.isValue(c)&&this.isValue(p)){var d=this.data[a+h*this.width],f=this.data[r+h*this.width];if(this.isValue(d)&&this.isValue(f))return this.interpolation(u,l,c,p,d,f)}}return new n.default(0,0)},t.prototype.interpolation=function(t,e,i,o,a,r){var s=1-t,h=1-e,u=s*h,l=t*h,c=s*e,p=t*e,d=i.u*u+o.u*l+a.u*c+r.u*p,f=i.v*u+o.v*l+a.v*c+r.v*p;return new n.default(d,f)},t.prototype.floorMod=function(t,e){return t-e*Math.floor(t/e)},t.prototype.isValue=function(t){return null!=t},t}();e.default=o},451:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){this.canvasBound=e,this.mapBound=t}return t.prototype.canvasToMap=function(t,e){var i=this.mapBound.east-this.mapBound.west,n=this.canvasBound.width/this.rad2deg(i)*360/(2*Math.PI),o=n/2*Math.log((1+Math.sin(this.mapBound.south))/(1-Math.sin(this.mapBound.south))),a=(this.canvasBound.height+o-e)/n,r=180/Math.PI*(2*Math.atan(Math.exp(a))-Math.PI/2);return[this.rad2deg(this.mapBound.west)+t/this.canvasBound.width*this.rad2deg(i),r]},t.prototype.mercY=function(t){return Math.log(Math.tan(t/2+Math.PI/4))},t.prototype.mapToCanvas=function(t,e){var i=this.mercY(this.mapBound.south),n=this.mercY(this.mapBound.north),o=this.canvasBound.width/(this.mapBound.east-this.mapBound.west),a=this.canvasBound.height/(n-i),r=this.mercY(this.deg2rad(e));return[(this.deg2rad(t)-this.mapBound.west)*o,r=(n-r)*a]},t.prototype.deg2rad=function(t){return t*Math.PI/180},t.prototype.rad2deg=function(t){return 180*t/Math.PI},t.prototype.distortion=function(t,e,i,n){var o=2*Math.PI,a=Math.pow(10,-5.2),r=t<0?a:-a,s=e<0?a:-a,h=this.mapToCanvas(t+r,e),u=this.mapToCanvas(t,e+s),l=Math.cos(e/360*o);return[(h[0]-i)/r/l,(h[1]-n)/r/l,(u[0]-i)/s,(u[1]-n)/s]},t.prototype.distort=function(t,e,i,n,o,a){var r=a.u*o,s=a.v*o,h=this.distortion(t,e,i,n);return a.u=h[0]*r+h[2]*s,a.v=h[1]*r+h[3]*s,a},t}();e.default=i},611:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e,i,n){this.north=t*Math.PI/180,this.east=e*Math.PI/180,this.south=i*Math.PI/180,this.west=n*Math.PI/180}return Object.defineProperty(t.prototype,"width",{get:function(){return(720+this.east-this.west)%360},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return(360+this.north-this.south)%180},enumerable:!1,configurable:!0}),t}();e.default=i},217:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e,i){this.x=t,this.y=e,this.age=Math.floor(Math.random()*i),this.maxAge=i}return t.prototype.reset=function(t,e){this.x=t,this.y=e,this.age=0},Object.defineProperty(t.prototype,"isDead",{get:function(){return this.age>this.maxAge},enumerable:!1,configurable:!0}),t.prototype.grow=function(){this.age++},t}();e.default=i},464:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){this.u=t||0,this.v=e||0}return Object.defineProperty(t.prototype,"intensity",{get:function(){return Math.sqrt(this.u*this.u+this.v*this.v)},enumerable:!1,configurable:!0}),t}();e.default=i},172:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(464),o=i(462),a=i(0),r=i(391),s=function(){function t(t){this.canvas=null,this.particuleMultiplier=1/300,this.autoColorRange=!1,this.particules=[],this.animationLoop=null,this.then=0,this.canvas=t.canvas,void 0===t.minVelocity&&void 0===t.maxVelocity&&(this.autoColorRange=!0),this.colorScale=new a.default(t.minVelocity||0,t.maxVelocity||10,t.colorScale),this.velocityScale=t.velocityScale||.01,this.particleAge=t.particleAge||64,this.setData(t.data),this.particuleMultiplier=t.particleMultiplier||1/300,this.particuleLineWidth=t.lineWidth||1;var e=t.frameRate||15;this.frameTime=1e3/e}return Object.defineProperty(t.prototype,"particuleCount",{get:function(){var t=/android|blackberry|iemobile|ipad|iphone|ipod|opera mini|webos/i.test(navigator.userAgent)?Math.pow(window.devicePixelRatio,1/3)||1.6:1;return Math.round(this.layer.canvasBound.width*this.layer.canvasBound.height*this.particuleMultiplier)*t},enumerable:!1,configurable:!0}),t.prototype.setData=function(t){var e=null,i=null,a=[];if(t.forEach((function(t){switch("".concat(t.header.parameterCategory,",").concat(t.header.parameterNumber)){case"1,2":case"2,2":e=t;break;case"1,3":case"2,3":i=t}})),e&&i){e.data.forEach((function(t,e){a.push(new n.default(t,i.data[e]))})),this.grid=new o.default(a,e.header.la1,e.header.lo1,e.header.dy,e.header.dx,e.header.ny,e.header.nx),this.Î»0=e.header.lo1,this.Ï0=e.header.la1,this.ÎÎ»=e.header.dx,this.ÎÏ=e.header.dy,this.ni=e.header.nx,this.nj=e.header.ny;for(var r=0,s=Math.floor(this.ni*this.ÎÎ»)>=360,h=0;h<this.nj;h++){for(var u=[],l=0;l<this.ni;l++,r++)u[l]=this.grid.data[r];s&&u.push(u[0]),this.grid[h]=u}if(this.autoColorRange){var c=this.grid.valueRange;this.colorScale.setMinMax(c[0],c[1])}}else console.warn("Data are not correct format")},t.prototype.floorMod=function(t,e){return t-e*Math.floor(t/e)},t.prototype.isValue=function(t){return null!=t},t.prototype.bilinearInterpolateVector=function(t,e,i,n,o,a){var r=1-t,s=1-e,h=r*s,u=t*s,l=r*e,c=t*e,p=i.u*h+n.u*u+o.u*l+a.u*c,d=i.v*h+n.v*u+o.v*l+a.v*c;return[p,d,Math.sqrt(p*p+d*d)]},t.prototype.interpolate=function(t,e){if(!this.grid)return null;var i=this.floorMod(t-this.Î»0,360)/this.ÎÎ»,n=(this.Ï0-e)/this.ÎÏ,o=Math.floor(i),a=o+1,r=Math.floor(n),s=r+1,h=this.grid[r];if(h){var u=h[o],l=h[a];if(this.isValue(u)&&this.isValue(l)&&(h=this.grid[s])){var c=h[o],p=h[a];if(this.isValue(c)&&this.isValue(p))return this.bilinearInterpolateVector(i-o,n-r,u,l,c,p)}}return null},t.prototype.getParticuleWind=function(t){var e=this.layer.canvasToMap(t.x,t.y),i=this.grid.get(e[0],e[1]);t.intensity=i.intensity;var n=this.layer.mapBound.height*this.layer.mapBound.width,o=this.velocityScale*Math.pow(n,.4);return this.layer.distort(e[0],e[1],t.x,t.y,o,i),i},t.prototype.start=function(t){this.context2D=this.canvas.getContext("2d"),this.context2D.lineWidth=this.particuleLineWidth,this.context2D.fillStyle="rgba(0, 0, 0, 0.97)",this.context2D.globalAlpha=.6,this.layer=t,this.animationBucket=new r.default(this.colorScale),this.particules.splice(0,this.particules.length);for(var e=0;e<this.particuleCount;e++)this.particules.push(this.layer.canvasBound.getRandomParticule(this.particleAge));this.then=(new Date).getTime(),this.frame()},t.prototype.frame=function(){var t=this;this.animationLoop=requestAnimationFrame((function(){t.frame()}));var e=(new Date).getTime(),i=e-this.then;i>this.frameTime&&(this.then=e-i%this.frameTime,this.evolve(),this.draw())},t.prototype.evolve=function(){var t=this;this.animationBucket.clear(),this.particules.forEach((function(e){e.grow(),e.isDead&&t.layer.canvasBound.resetParticule(e);var i=t.getParticuleWind(e);t.animationBucket.add(e,i)}))},t.prototype.draw=function(){this.context2D.globalCompositeOperation="destination-in",this.context2D.fillRect(this.layer.canvasBound.xMin,this.layer.canvasBound.yMin,this.layer.canvasBound.width,this.layer.canvasBound.height),this.context2D.globalCompositeOperation="lighter",this.context2D.globalAlpha=.9,this.animationBucket.draw(this.context2D)},t.prototype.stop=function(){this.particules.splice(0,this.particules.length),this.animationBucket.clear(),this.animationLoop&&(clearTimeout(this.animationLoop),this.animationLoop=null)},t}();e.default=s}},s={};function h(t){var e=s[t];if(void 0!==e)return e.exports;var i=s[t]={id:t,exports:{}};return r[t](i,i.exports,h),i.exports}h.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return h.d(e,{a:e}),e},h.d=(t,e)=>{for(var i in e)h.o(e,i)&&!h.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},h.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),h.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},h.nc=void 0,t=h(871),e=h(611),i=h(172),n=h(45),o=h(366),a=h(544),window.CanvasBound=t.default,window.MapBound=e.default,window.Windy=i.default,L.CanvasLayer=(L.Layer?L.Layer:L.Class).extend(new n.default),L.canvasLayer=function(){return new L.CanvasLayer},L.ControlVelocity=L.Control.extend(new a.default),L.controlVelocity=function(){return new L.ControlVelocity},L.VelocityLayer=(L.Layer?L.Layer:L.Class).extend(new o.default),L.velocityLayer=function(t){return new L.VelocityLayer(t)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,